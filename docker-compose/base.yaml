version: '2'

services:

  zookeeper:
    image: hyperledger/fabric-zookeeper
    ports:
        - 2181
        - 2888
        - 3888
  
  kafka:
    image: hyperledger/fabric-kafka
    environment:
        - KAFKA_LOG_RETENTION_MS=-1
        - KAFKA_MESSAGE_MAX_BYTES=103809024
        - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
        - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
        - KAFKA_DEFAULT_REPLICATION_FACTOR=3
        - KAFKA_MIN_INSYNC_REPLICAS=2
    ports:
        - 9092
  
  orderer:
    image: hyperledger/fabric-orderer
    environment:
        # - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_behave
        # - ORDERER_HOME=/var/hyperledger/orderer
        - ORDERER_GENERAL_LOGLEVEL=debug
        # - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/msp
        - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/crypto/orderer/msp
        - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
        - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
        # - ORDERER_GENERAL_LISTENPORT=7050
        # - ORDERER_GENERAL_LEDGERTYPE=ram
        - ORDERER_GENERAL_GENESISMETHOD=file
        # - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/configs/orderer.block
        - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
        - CONFIGTX_ORDERER_ORDERERTYPE=solo
        - CONFIGTX_ORDERER_BATCHSIZE_MAXMESSAGECOUNT=10
        - CONFIGTX_ORDERER_BATCHTIMEOUT=2s
        # - CONFIGTX_ORDERER_ADDRESSES=[127.0.0.1:7050]
        # TLS settings
        - ORDERER_GENERAL_TLS_ENABLED=true
        - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/crypto/orderer/tls/server.key
        - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/crypto/orderer/tls/server.crt
        - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/crypto/orderer/tls/ca.crt]

        - ORDERER_TLS_CLIENTAUTHREQUIRED=false
        - ORDERER_TLS_CLIENTROOTCAS_FILES=/etc/hyperledger/crypto/orderers/users/Admin@example.com/tls/ca.crt
        - ORDERER_TLS_CLIENTCERT_FILE=/etc/hyperledger/crypto/orderers/users/Admin@example.com/tls/client.crt
        - ORDERER_TLS_CLIENTKEY_FILE=/etc/hyperledger/crypto/orderers/users/Admin@example.com/tls/client.key
    volumes:
        - ./channel:/etc/hyperledger/configtx
        - ./channel/crypto-config-orderers/ordererOrganizations/example.com:/etc/hyperledger/crypto/orderers
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - '7050'

  peer-base:
    image: hyperledger/fabric-peer
    restart: on-failure
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker-compose_default
      - CORE_LOGGING_LEVEL=INFO
      # - CORE_PEER_ADDRESSAUTODETECT=true
      # Dynamic leader election
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/crypto/peer/msp
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/crypto/peer/tls/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/crypto/peer/tls/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/crypto/peer/tls/ca.crt
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
        - /var/run/:/host/var/run/
